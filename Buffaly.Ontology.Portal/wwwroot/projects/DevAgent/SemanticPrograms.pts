


prototype LearnedAction
{
	Prototype Modality = null;	
	Collection Sources = new Collection();
	Collection Targets = new Collection();
}



prototype LearnedEntity
{
	Collection Facts = new Collection();
	String EntityName = new String();
}


prototype File : LearnedEntity
{
	String FileName = new String();
	String FullPath = new String();
}


[SemanticEntity("C# File")]
prototype CSharp.File : File;

[SemanticEntity("kScript File")]
prototype kScript.File : File;

prototype kScript.AdminFile : kScript.File;

[SemanticEntity("kScript based page")]
prototype kScript.BasedPage : kScript.File;

[SemanticEntity("details page")]
prototype kScript.DetailsPage : kScript.BasedPage;

[SemanticEntity("edit page")]
prototype kScript.EditPage : kScript.BasedPage;

[SemanticEntity("insert page")]
prototype kScript.InsertPage : kScript.BasedPage;

[SemanticEntity("simple page")]
prototype kScript.SimplePage : kScript.BasedPage;

[SemanticEntity("object page")]
prototype kScript.ObjectsPage : kScript.BasedPage;



prototype SemanticProgram 
{
	function InfinitivePhrase(Prototype prototype, string infinitive) : void 
	{
		ProtoScriptAgent.InsertSemanticProgram(prototype, infinitive);
	}
	
	function Directive(Prototype prototype, string directive) : void 
	{
		ProtoScriptAgent.InsertAsDirective(prototype, directive);
	}
}

function SemanticEntity(Prototype prototype, string strEntity) : void
{
	ProtoScriptAgent.InsertSemanticEntity(prototype, strEntity, _tagger);
}




//Semantic Program 
prototype ProtoScriptAction : LearnedAction
{
	String Name = new String(); 
	String Signature = new String();
	String Description = new String();
	
	Collection Examples = new Collection();
}



/////////////////////////////////////  LLMs  //////////////////////////////////////


prototype Example
{
	function that(String source, String target) : void 
	{
		this.Source = source;
		this.Target = target;
	}
	
	String Source = new String();
	String Target = new String();
}

[SemanticProgram.InfinitivePhrase("to create an llm prompt")]
prototype ToCreateAnLLMPrompt : ProtoScriptAction
{
	function that() : void 
	{
		this.Name = "ToCreateAnLLMPrompt";
		this.Signature = "ToCreateAnLLMPrompt.CreateLLMPrompt(string instructions, Collection examples, string outputFormat) : string";
		this.Description = @"
			instructions - the instructions to include in this prompt 	
			examples - a list of inputs and output pairs to provide as examples
			outputFormat - as JSON output format to provide as part of the prompt" ;
	}	

	function CreateLLMPrompt(String instructions, Collection examples, String outputFormat) : string 
	{
		//String should convert automatically 
		return LLMs.CreateLLMPrompt(instructions, examples, outputFormat); 
	}
}


[SemanticProgram.InfinitivePhrase("to add a section to an llm prompt")]
prototype ToAddASectionToAnLLMPrompt : ProtoScriptAction
{
	function that() : void 
	{
		this.Name = "ToCreateAnLLMPrompt";
		this.Signature = "ToAddASectionToAnLLMPrompt.Execute(string prompt, string sectionName, string sectionContent) : string";
		this.Description = @"
			prompt - the prompt to modify 
			sectionName - the title of this section
			sectionContent - content for the section" ;
	}	

	function Execute(string prompt, string sectionName, string sectionContent) : string 
	{
		return LLMs.AddSectionToPrompt(prompt, sectionName, sectionContent); 
	}
}


[SemanticProgram.InfinitivePhrase("to execute an LLM prompt and input")]
prototype ToExecuteAnLLMPromptAndInput : ProtoScriptAction
{
	function that() : void 
	{
		this.Name = "ToExecuteAnLLMPromptAndInput";
		this.Signature = "ToExecuteAnLLMPromptAndInput.Execute(string prompt, string input) : string";
		this.Description = @"
			prompt - the prompt to send 
			input - the input to the LLM";
	}	

	function Execute(String prompt, String input) : JsonObject 
	{
		//String should convert automatically 
		return LLMs.ExecuteLLMPromptAndInput(prompt, input); 
	}
}




////////////////////////////////////////// Ontology //////////////////////////////////////////

[SemanticProgram.InfinitivePhrase("To retrieve a property from a prototype")]
prototype ToRetrieveAPropertyFromAPrototype : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "ToRetrieveAPropertyFromAPrototype.Execute(string prototype, string propertyName) : string";
		this.Description = @"
			prototype - the prototype from which to retrieve the property
			propertyName - the name of the property to retrieve";
	}

	function Execute(Prototype prototype, String parentPrototype, String propertyName) : Prototype 
	{
		return prototype.Properties[parentPrototype + ".Field." + propertyName];
	}
}

/*
[SemanticProgram.InfinitivePhrase("To insert an entity as a prototype")]
prototype ToInsertAnEntityAsAPrototype : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "ToInsertAnEntityAsAPrototype.Execute(string strEntity, string strParent, string strRelated) : void";
		this.Description = @"
			Inserts an entity by utilizing ProtoScriptActions.InsertEntity method, providing entity, parent, and related information.
		";
	}

	function Execute(string strEntity, string strParent, string strRelated) : Prototype 
	{
		// Use the InsertEntity method to perform the entity insertion.
		// Insert the entity using the specified parameters (entity name, parent, related information).
		return ProtoScriptActions.InsertEntity(strEntity, strParent, strRelated, _tagger);
	}
} */



[SemanticProgram.InfinitivePhrase("To materialize a prototype to a string")]
prototype ToMaterializeAPrototypeToString : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "ToMaterializeAPrototypeToString.Execute(Prototype prototype) : string";
		this.Description = @"
			Materializes the given prototype into a string representation.
			prototype - the instance of the prototype to be materialized to a string.
		";
	}

	function Execute(Prototype prototype) : string 
	{
		// Step 1: Use the ProtoScriptActions materialize method to convert the prototype into a string
		return PrototypeDefinitionHelpers.MaterializePrototypeToString(prototype, true);
	}
}

