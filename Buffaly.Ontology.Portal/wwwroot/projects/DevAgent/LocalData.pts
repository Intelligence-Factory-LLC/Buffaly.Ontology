///// Visual Studio Solutions ///////////////

prototype BaseObject;

prototype VisualStudioSolution : BaseObject
{
	String SolutionName = new String();
	String Directory = new String();
	String ScriptDirectory = new String();
	String FileName = new String();
}

prototype VisualStudioProject : BaseObject
{
	VisualStudioSolution Solution = null;
	
	String ProjectName = new String();
}


partial prototype VisualStudioSolution#RPM : VisualStudioSolution, BaseObject
{
	init
	{
		FileName = "rpm.sln";
		ScriptDirectory = "c:\\s4b\\rpm_2025\\Scripts";
		Directory = "c:\\s4b\\rpm_2025";
		SolutionName = "c:\\s4b\\rpm_2025\\rpm.sln";
	}

}

partial prototype VisualStudioSolution#RPM8 : VisualStudioSolution, BaseObject
{
	init
	{
		FileName = "RPM8.sln";
		ScriptDirectory = "c:\\s4b\\RPM8\\Scripts";
		Directory = "c:\\s4b\\RPM8";
		SolutionName = "c:\\s4b\\RPM8\\RPM8.sln";
	}

}

partial prototype VisualStudioSolution#FeedingFrenzy : VisualStudioSolution, BaseObject
{
	init
	{
		FileName = "FeedingFrenzy.sln";
		ScriptDirectory = "c:\\dev\\FeedingFrenzy\\Scripts";
		Directory = "c:\\dev\\FeedingFrenzy";
		SolutionName = "c:\\dev\\FeedingFrenzy\\FeedingFrenzy.sln";
	}

}



partial prototype VisualStudioSolution#Buffaly : VisualStudioSolution, BaseObject
{
	init
	{
		FileName = "Buffaly.sln";
		ScriptDirectory = "c:\\dev\\BuffalyNet6\\Scripts";
		Directory = "c:\\dev\\BuffalyNet6";
		SolutionName = "c:\\dev\\BuffalyNet6\\Buffaly.sln";
	}

}


partial prototype VisualStudioSolution#RooTrax.Creator : VisualStudioSolution, BaseObject
{
	init
	{
		FileName = "RooTrax.Creator.sln";
		ScriptDirectory = "c:\\dev\\RooTrax.Creator\\Scripts";
		Directory = "c:\\dev\\RooTrax.Creator";
		SolutionName = "c:\\dev\\RooTrax.Creator\\RooTrax.Creator.sln";
	}

}







///Javascript 
prototype JavaScriptMethod : LearnedAction
{
	String Name = new String(); 
	Collection Examples = new Collection();
}


prototype SQLWorkbench_InspectResults : JavaScriptMethod
{
	function that() : void 
	{
		this.Name = "InspectResults";
		this.Examples.Add("InspectResults();");
	}
}


[SemanticProgram.InfinitivePhrase("list all the C# files in the RPM solutions RPM.Leads.Data directory and add each file to a Collection prototype")]
prototype ListAllCSharpFilesInRPMSolutionsLeadsDataDirectoryAndAddToCollection : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "ListAllCSharpFilesInRPMSolutionsLeadsDataDirectoryAndAddToCollection.Execute() : Collection";
		this.Description = @"
			Lists all the C# files in the RPM solutions RPM.Leads.Data directory by retrieving file paths using a '*.cs' pattern,
			and then adds each file path to a Collection prototype.
		";
	}

	function Execute() : Collection
	{
		// Define the directory path
		String directoryPath = "c:\\s4b\\rpm\\RPM.Leads.Data";
		
		// Define the search pattern to match C# files
		String pattern = "*.cs";

		// Use the System.GetFilesMatchingPattern method to retrieve the list of C# files in the directory
		Prototype files = SystemOperations.GetFilesMatchingPattern(directoryPath, pattern);

		// Create a new Collection prototype to store file paths
		Collection fileCollection = new Collection();

		// Iterate through each file and add the path to the Collection
		foreach (Prototype filePath in files)
		{
			fileCollection.Add(filePath);
		}

		// Return the Collection containing all C# file paths
		return fileCollection;
	}
}

[SemanticProgram.InfinitivePhrase("create a Project RPM.Leads.Data in the solution RPM8")]
prototype CreateRPMLeadsDataProjectInRPM8Solution : ProtoScriptAction
{
	function that() : void
	{
		this.Name = nameof(that);
		this.Signature = "CreateRPMLeadsDataProjectInRPM8Solution.Execute() : string";
		this.Description = "Create the RPM.Leads.Data project in the RPM8 solution using the dotnet CLI.";
	}

	function Execute() : string
	{
		// Define the path to the RPM8 solution
		String solutionPath = "c:\\s4b\\RPM8";

		// Define the name of the project being added
		String projectName = "RPM.Leads.Data";

		// Call the function to add the project
		String result = ToAddClassLibraryProjectToSolutionUsingDotnetCLI.Execute(solutionPath, "RPM8", projectName);

		// Return the result of the operation
		return result;
	}
}

[SemanticProgram.InfinitivePhrase("get a bat files from the RPM script directory")]
prototype ToGetBatFilesFromRPMScriptDirectory : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "ToGetBatFilesFromRPMScriptDirectory.Execute() : Collection";
		this.Description = @"
			Retrieves a list of .bat file paths from the RPM script directory and adds each file path to a Collection prototype.
		";
	}

	function Execute() : List<string>
	{
		// Define the directory path to the RPM script directory
		String directoryPath = "c:\\s4b\\rpm_2025\\Scripts";

		// Define the search pattern to match .bat files
		String pattern = "*.bat";

		// Use the SystemOperations.GetFilesMatchingPattern method to retrieve the list of .bat files in the directory
		return SystemOperations.GetFilesMatchingPattern(directoryPath, pattern);
	}
}

[SemanticProgram.InfinitivePhrase("copy each of the bat files in the rpm solution's script directory to the rpm8's script directory")]
prototype CopyBatFilesFromRPMScriptsToRPM8Scripts : ProtoScriptAction
{
	function that() : void
	{
		this.Name = nameof(that);
		this.Signature = "CopyBatFilesFromRPMScriptsToRPM8Scripts.Execute() : void";
		this.Description = @"
			Copies each of the .bat files in the RPM solution's script directory to the RPM8's script directory.
		";
	}

	function Execute() : void
	{
		// Step 1: Get the collection of .bat files from the RPM script directory
		List<string> batFiles = ToGetBatFilesFromRPMScriptDirectory.Execute();

		// Step 2: Define the target directory for RPM8 scripts
		String rpm8ScriptDirectory = "c:\\s4b\\RPM8\\Scripts";


		// Step 4: Copy files to RPM8's script directory
		SystemOperations.CopyFilesToDirectory(batFiles, rpm8ScriptDirectory);
	}
}

[SemanticProgram.InfinitivePhrase("add a new project RPM.Common to the RPM8 solution")]
prototype AddNewProjectRPMCommonToRPM8Solution : ProtoScriptAction
{
	function that() : void
	{
		this.Name = nameof(that);
		this.Signature = "AddNewProjectRPMCommonToRPM8Solution.Execute() : string";
		this.Description = @"
			Adds a new .NET class library project 'RPM.Common' to the 'RPM8' solution using the dotnet CLI.
		";
	}

	function Execute() : string
	{
		// Define the path to the RPM8 solution
		String solutionPath = "c:\\s4b\\RPM8";

		// Define the name of the project being added
		String projectName = "RPM.Common";

		// Call the function to add the project
		String result = ToAddClassLibraryProjectToSolutionUsingDotnetCLI.Execute(solutionPath, "RPM8", projectName);

		// Return the result of the operation
		return result;
	}
}

[SemanticProgram.InfinitivePhrase("copy the c# files from the RPM solution's RPM.Common subdirectory to RPM8")]
prototype CopyCSharpFilesFromRPMCommonToRPM8 : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "CopyCSharpFilesFromRPMCommonToRPM8.Execute() : void";
		this.Description = @"
			Copies all the C# files from the RPM solution's RPM.Common subdirectory to the RPM8 directory.
		";
	}

	function Execute() : void 
	{
		// Step 1: Define the source directory path for C# files
		String sourceDirectory = "c:\\s4b\\rpm_2025\\RPM.Common";

		// Step 2: Define the target directory for RPM8
		String targetDirectory = "c:\\s4b\\RPM8\\RPM.Common";

		// Step 3: Define the pattern to match C# files
		String pattern = "*.cs";

		// Step 4: Retrieve the list of C# files from the source directory
		List csharpFiles = SystemOperations.GetFilesMatchingPattern(sourceDirectory, pattern);

		// Step 5: Copy the C# files to the target directory
		SystemOperations.CopyFilesToDirectory(csharpFiles, targetDirectory);
	}
}

/*
[SemanticProgram.InfinitivePhrase(@"Find References in a Directory c:\s4b\RPM_2025 for RPM.Data")]
prototype FindReferencesInRPMSolutionDirectory : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "FindReferencesInRPMSolutionDirectory.Execute() : List";
		this.Description = @"
			Finds all references of 'RPM.Data' within project files in the 'c:\\s4b\\RPM_2025' directory and returns a list of files containing those references.
		";
	}

	function Execute() : Prototype 
	{
		// Define the directory path where the search will take place
		String solutionDirectory = @"c:\\s4b\\RPM_2025";
		// The reference to search for in the project files
		String referenceToFind = "RPM.Data";

		// Use the CSharp method to find references in the specified directory
		List<string> lstValues = VsProjects.FindReferencesInDirectory(solutionDirectory, referenceToFind);
		return lstValues.Count;
	}
} */

[SemanticProgram.InfinitivePhrase("launch the RPM visual studio solution")]
prototype LaunchRPMVisualStudioSolution : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "LaunchRPMVisualStudioSolution.Execute() : string";
		this.Description = @"
			Launches the RPM Visual Studio solution by opening the associated .sln file using VSCode.
		";
	}

	function Execute() : Prototype 
	{
		// Step 1: Define the full path to the RPM solution's .sln file
		String solutionPath = @"c:\s4b\rpm_2025\rpm.sln";

		// Step 2: Define the command to open Visual Studio Code
		String command = "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe";

		// Step 3: Define the arguments to open the solution file
		String arguments = "\"" + solutionPath + "\"";

		// Step 4: Execute the command using the ToExecuteCommandLineOperation semantic program
		return ToExecuteCommandLineOperation.Execute(command, arguments);
	}
}

[SemanticProgram.InfinitivePhrase(@"create a visual studio solution prototype for FeedingFrenzy in the directory c:\dev\FeedingFrenzy and materialize it to a string")]
prototype CreateAndMaterializeFeedingFrenzySolution : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "CreateAndMaterializeFeedingFrenzySolution.Execute() : string";
		this.Description = @"
			Creates a Visual Studio solution prototype for FeedingFrenzy in the specified directory and materializes it to a string.
		";
	}

	function Execute() : string 
	{
		// Step 1: Define solution directory and name
		string solutionDirectory = "c:\\dev\\FeedingFrenzy";
		string solutionName = "FeedingFrenzy";

		// Step 2: Create the Visual Studio solution prototype
		VisualStudioSolution solutionPrototype = ToCreateVisualStudioSolutionPrototype.Execute(solutionDirectory, solutionName);

		// Step 3: Materialize the created prototype to a string
		string materializedSolution = ToMaterializeAPrototypeToString.Execute(solutionPrototype);

		// Step 4: Return the materialized string
		return materializedSolution;
	}
}


[SemanticProgram.InfinitivePhrase("Create a bat file to copy appsettings.ff.json to appsettings.json, kill the process FeedingFrenzy.Admin.exe, and write the bat file to the Scripts directory of the Feeding Frenzy solution.")]
prototype CreateBatFileForFeedingFrenzyAdmin : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "CreateBatFileForFeedingFrenzyAdmin.Execute() : void";
		this.Description = @"
			Creates a batch file that performs the following actions: 
			1. Copies appsettings.ff.json to appsettings.json.
			2. Kills the process FeedingFrenzy.Admin.exe.
			3. Writes the batch file to the Scripts directory of the Feeding Frenzy solution.
		";
	}

	function Execute() : void 
	{
		// Step 1: Define the content of the batch file
		String batFileContent = @"
		@echo off
		copy /Y appsettings.ff.json appsettings.json
		taskkill /IM FeedingFrenzy.Admin.exe /F
		";

		// Step 2: Define the path to the batch file in the Feeding Frenzy Scripts directory
		String batFilePath = "c:\\dev\\FeedingFrenzy\\Scripts\\FeedingFrenzyActions.bat";

		// Step 3: Write the batch file content to the specified path
		FileUtil.WriteFile(batFilePath, batFileContent);
		
		// No return value needed, function is intended to perform an action
	}
}

[SemanticProgram.InfinitivePhrase("Create a bat file to copy appsettings.medek.json to appsettings.json, kill the process FeedingFrenzy.Admin.exe, and write the bat file to the Scripts directory of the Feeding Frenzy solution as switch_to_medek.bat.")]
prototype CreateMedekSwitchBatFile : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "CreateMedekSwitchBatFile.Execute() : void";
		this.Description = @"
			Creates a batch file that performs the following actions: 
			1. Copies appsettings.medek.json to appsettings.json.
			2. Kills the process FeedingFrenzy.Admin.exe.
			3. Writes the batch file to the Scripts directory of the Feeding Frenzy solution as switch_to_medek.bat.
		";
	}

	function Execute() : void 
	{
		// Step 1: Define the content of the batch file
		String batFileContent = @"
		@echo off
		copy /Y appsettings.medek.json appsettings.json
		taskkill /IM FeedingFrenzy.Admin.exe /F
		";

		// Step 2: Define the path to the batch file in the Feeding Frenzy Scripts directory
		String batFilePath = "c:\\dev\\FeedingFrenzy\\Scripts\\switch_to_medek.bat";

		// Step 3: Write the batch file content to the specified path
		FileUtil.WriteFile(batFilePath, batFileContent);
		
		// No return value needed, function is intended to perform an action
	}
}
[SemanticProgram.InfinitivePhrase("create a visual studio solution prototype for Buffaly in the directory c:\\dev\\BuffalyNet6 and materialize it to a string")]
prototype CreateAndMaterializeBuffalySolution : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "CreateAndMaterializeBuffalySolution.Execute() : string";
		this.Description = @"
			Creates a Visual Studio solution prototype for Buffaly in the directory c:\\dev\\BuffalyNet6
			and materializes it to a string."
		;
	}

	function Execute() : string 
	{
		// Step 1: Define solution directory and name
		string solutionDirectory = "c:\\dev\\BuffalyNet6";
		string solutionName = "Buffaly";

		// Step 2: Create the Visual Studio solution prototype
		VisualStudioSolution solutionPrototype = ToCreateVisualStudioSolutionPrototype.Execute(solutionDirectory, solutionName);

		// Step 3: Materialize the created prototype to a string
		string materializedSolution = ToMaterializeAPrototypeToString.Execute(solutionPrototype);

		// Step 4: Return the materialized string
		return materializedSolution;
	}
}


[SemanticProgram.InfinitivePhrase("create a command line call to launch the Buffaly solution's project Buffaly.SemanticDB.Portal as a .net 8 web application without building it again")]
prototype LaunchBuffalySemanticDBPortalAsDotNet8WebAppWithoutBuild : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "LaunchBuffalySemanticDBPortalAsDotNet8WebAppWithoutBuild.Execute() : string";
		this.Description = @"
			Launches the Buffaly solution's project Buffaly.SemanticDB.Portal as a .NET 8 web application without rebuilding it, using the .NET CLI.
		";
	}

	function Execute() : Prototype 
	{
		// Step 1: Define the path to the Buffaly.SemanticDB.Portal project
		String projectPath = "c:\\dev\\BuffalyNet6\\Buffaly.SemanticDB.Portal";

		// Step 2: Define the path to the .NET CLI
		String command = "C:\\Program Files\\dotnet\\dotnet.exe";

		// Step 3: Construct the arguments to launch the previously built .NET 8 web application without rebuilding
		String arguments = "run --no-build --project \"" + projectPath + "\"";

		// Step 4: Execute the command line operation to launch the application without rebuilding
		ToExecuteCommandLineOperationWithoutWait.Execute(command, arguments);
		
		return ToLaunchOrOpenFile.Execute("https://localhost:7182/fragments");
	}
}

[SemanticProgram.InfinitivePhrase("launch the Ontology solutions Ontology.Services web site in iisexpress")]
prototype LaunchOntologyServicesInIISExpress : ProtoScriptAction 
{ 
	function that() : void 
	{ 
		this.Name = nameof(that);
		this.Signature = "LaunchOntologyServicesInIISExpress.Execute() : void";
		this.Description = @"
			Launches the Ontology Services web site in IIS Express by starting the web service using a hardcoded solution directory.
		";
	}

	function Execute() : Prototype 
	{
		// Step 1: Define the hardcoded solution root directory
		String solutionRootDir = @"C:\dev\ai\ontology\";

		// Step 2: Define the site name
		String siteName = "Ontology.Services";

		// Step 3: Use the StartWebService method to launch the web service in IIS Express
		return VsProjects.StartWebService(solutionRootDir, "Ontology", siteName);
	}
}


[SemanticProgram.InfinitivePhrase("launch the Metabase project in RooTrax.Creator in iisexpress")]
prototype LaunchMetabaseInIISExpress : ProtoScriptAction 
{ 
	function that() : void 
	{ 
		this.Name = nameof(that);
		this.Signature = "LaunchMetabaseInIISExpress.Execute() : void";
		this.Description = @"
			Launches the Metabase project within the RooTrax.Creator solution in IIS Express. The solution is located in a hardcoded solution directory.
		";
	}

	function Execute() : Prototype 
	{
		// Step 1: Define the solution root directory for RooTrax.Creator
		String solutionRootDir = @"C:\dev\RooTrax.Creator\";

		// Step 2: Define the site name for the Metabase project
		String siteName = "Metabase";

		// Step 3: Use the StartWebService method to launch the Metabase project in IIS Express
		VsProjects.StartWebService(solutionRootDir, "RooTrax.Creator", siteName);
		
		return ToLaunchOrOpenFile.Execute("http://localhost:51938/Default.aspx");
	}
}
[SemanticProgram.InfinitivePhrase("launch the CreatorSite project in RooTrax.Creator in iisexpress")]
prototype LaunchCreatorSiteInIISExpress : ProtoScriptAction 
{ 
	function that() : void 
	{ 
		this.Name = nameof(that);
		this.Signature = "LaunchCreatorSiteInIISExpress.Execute() : void";
		this.Description = @"
			Launches the CreatorSite project within the RooTrax.Creator solution using IIS Express. The solution is located in a hardcoded solution directory.
		";
	}

	function Execute() : Prototype 
	{
		// Step 1: Define the solution root directory for RooTrax.Creator
		String solutionRootDir = @"C:\dev\RooTrax.Creator\";

		// Step 2: Define the site name for the CreatorSite project
		String siteName = "CreatorSite";

		// Step 3: Use the StartWebService method to launch the CreatorSite project in IIS Express
		VsProjects.StartWebService(solutionRootDir, "RooTrax.Creator", siteName);
		
		return ToLaunchOrOpenFile.Execute("http://localhost:3720/Default.aspx");	
	}
}
[SemanticProgram.InfinitivePhrase("get all cs files in RPM solution in the RPM.Leads.Data directory")]
prototype GetAllCSFilesInRPMLeadsDataDirectory : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "GetAllCSFilesInRPMLeadsDataDirectory.Execute() : Collection";
		this.Description = @"
			Retrieves all C# files from the RPM solution's RPM.Leads.Data directory by utilizing a method to search and add each file path to a Collection prototype.
		";
	}

	function Execute() : Collection
	{
		// Define the directory path for the RPM.Leads.Data directory
		String directoryPath = "c:\\s4b\\rpm\\RPM.Leads.Data";
		
		// Define the search pattern to match C# files
		String pattern = "*.cs";

		// Use the SystemOperations.GetFilesMatchingPattern method to retrieve the list of C# files in the directory
		List files = SystemOperations.GetFilesMatchingPattern(directoryPath, pattern);

		// Create a new Collection prototype to store file paths
		Collection fileCollection = new Collection();

		// Iterate through each file path and add it to the Collection
		foreach (String filePath in files)
		{
			fileCollection.Add(filePath);
		}

		// Return the Collection containing all C# file paths
		return fileCollection;
	}
}

[SemanticProgram.InfinitivePhrase("Get all of the subdirectories under C:\\dev\\ai\\ontology\\ProtoScript.Tests\\DevAgent\\CodeIndex and create strings include \"SubDirectory\\FileIndex.pts\"")]
prototype GetSubdirectoriesAndCreateIncludeStrings : ProtoScriptAction 
{
	function that() : void 
	{
		this.Name = nameof(that);
		this.Signature = "GetSubdirectoriesAndCreateIncludeStrings.Execute() : List";
		this.Description = @"
			Gets all of the subdirectories under the specified directory and 
			create strings to include ""SubDirectory\\FileIndex.pts"" for each.";
	}

	function Execute() : String
	{
		// Define the target directory to retrieve subdirectories
		String targetDirectory = "C:\\dev\\ai\\ontology\\ProtoScript.Tests\\DevAgent\\CodeIndex";

		// Use the C# method to get all subdirectories within the specified directory
		List<String> subDirectories = SystemOperations.GetSubdirectories(targetDirectory);

		// Create a List prototype to store include strings
		String includeStrings = new String();

		// Iterate through each subdirectory
		foreach (String subDirectory in subDirectories)
		{
			// Extract the subdirectory name
			String subDirectoryName = StringUtil.RightOfLast(subDirectory, "\\");

			// Create the include string for the current subdirectory
			String includeString = "include @\"CodeIndex\\" + subDirectoryName + "\\FileIndex.pts\";\r\n";

			// Add the include string to the list
			includeStrings += includeString;
		}

		// Return the list of include strings
		return includeStrings;
	}
} 